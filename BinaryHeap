import math
class BinaryHeap:

    def __init__(self):
        self.heaplist=[0]
        self.heapsize=0

    def validateposition(self):
        i=self.heapsize
        while i // 2 > 0:
            if self.heaplist[i] < self.heaplist[i // 2]:
                self.heaplist[i // 2],self.heaplist[i] = self.heaplist[i],self.heaplist[i // 2]
            i = i // 2


    def insertNode(self,data):
        self.heaplist.append(data)
        self.heapsize+=1
        self.validateposition()

    def print_heap(self):
        height=int(math.ceil(math.log(self.heapsize,2))+1)
        index=1
        for i in range(0,height):
            for i in range(2**i):
                if index > self.heapsize:break
                print(self.heaplist[index],end="\t")
                index+=1
            print("\n")

    def __minchild_of_ith_parent(self,i):
        if i*2+1>self.heapsize:
            return i*2
        else:
            if self.heaplist[i*2] > self.heaplist[i*2 + 1]:return i*2 + 1
            else:return i*2

    def goDown_makeHeap(self,i):
        while i*2 < self.heapsize:
            mcindex=self.__minchild_of_ith_parent(i)
            if self.heaplist[i] > self.heaplist[mcindex]:
                self.heaplist[i],self.heaplist[mcindex]=self.heaplist[mcindex],self.heaplist[i]
            i=mcindex

    def deleteMin(self):
        self.heaplist[1],self.heaplist[self.heapsize]=self.heaplist[self.heapsize],self.heaplist[1]
        self.heaplist.pop()
        self.heapsize -= 1
        self.goDown_makeHeap(1)

    def buildHeap(self,alist):
        i = len(alist) // 2
        self.heapsize = len(alist)
        self.heaplist = [0] + alist[:]
        while (i > 0):
            self.goDown_makeHeap(i)
            i = i - 1







